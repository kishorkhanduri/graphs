Q.1. Breadth-First Traversal for a Graph
class Graph {
    constructor(vertices) {
        this.vertices = vertices;
        this.adjList = new Map();
    }

    addVertex(v) {
        this.adjList.set(v, []);
    }

    addEdge(v, w) {
        this.adjList.get(v).push(w);
        this.adjList.get(w).push(v); // For undirected graph
    }

    bfs(startingNode) {
        let visited = new Array(this.vertices).fill(false);
        let queue = [];
        visited[startingNode] = true;
        queue.push(startingNode);

        while (queue.length > 0) {
            let getQueueElement = queue.shift();
            console.log(getQueueElement);

            let list = this.adjList.get(getQueueElement);
            for (let i in list) {
                let neigh = list[i];
                if (!visited[neigh]) {
                    visited[neigh] = true;
                    queue.push(neigh);
                }
            }
        }
    }
}

// Example usage:
let g = new Graph(6);
let vertices = [0, 1, 2, 3, 4, 5];
vertices.forEach(v => g.addVertex(v));
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(2, 4);
g.addEdge(3, 5);
g.bfs(0); // Output: 0 1 2 3 4 5




Q.2. Depth-First Traversal for a Graph
class Graph {
    constructor(vertices) {
        this.vertices = vertices;
        this.adjList = new Map();
    }

    addVertex(v) {
        this.adjList.set(v, []);
    }

    addEdge(v, w) {
        this.adjList.get(v).push(w);
        this.adjList.get(w).push(v); // For undirected graph
    }

    dfs(startingNode) {
        let visited = new Array(this.vertices).fill(false);
        this.dfsUtil(startingNode, visited);
    }

    dfsUtil(vert, visited) {
        visited[vert] = true;
        console.log(vert);

        let getNeighbours = this.adjList.get(vert);
        for (let i in getNeighbours) {
            let getElement = getNeighbours[i];
            if (!visited[getElement]) {
                this.dfsUtil(getElement, visited);
            }
        }
    }
}

// Example usage:
let g2 = new Graph(6);
vertices.forEach(v => g2.addVertex(v));
g2.addEdge(0, 1);
g2.addEdge(0, 2);
g2.addEdge(1, 3);
g2.addEdge(2, 4);
g2.addEdge(3, 5);
g2.dfs(0); // Output: 0 1 3 5 2 4





Q.3. Count the number of nodes at a given level in a tree using BFS
class TreeNode {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

function countNodesAtLevel(root, level) {
    if (root === null) return 0;

    let queue = [root];
    let currentLevel = 0;

    while (queue.length > 0) {
        let levelSize = queue.length;

        if (currentLevel === level) {
            return levelSize;
        }

        for (let i = 0; i < levelSize; i++) {
            let node = queue.shift();

            if (node.left !== null) queue.push(node.left);
            if (node.right !== null) queue.push(node.right);
        }

        currentLevel++;
    }

    return 0; // If level is greater than the height of the tree
}

// Example usage:
const root = new TreeNode(1);
root.left = new TreeNode(2);
root.right = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(5);
root.right.left = new TreeNode(6);
root.right.right = new TreeNode(7);
console.log(countNodesAtLevel(root, 2)); // Output: 4





Q.4. Count number of trees in a forest
class Graph {
    constructor(vertices) {
        this.vertices = vertices;
        this.adjList = new Map();
        this.visited = new Array(vertices).fill(false);
    }

    addVertex(v) {
        this.adjList.set(v, []);
    }

    addEdge(v, w) {
        this.adjList.get(v).push(w);
        this.adjList.get(w).push(v); // For undirected graph
    }

    dfs(v) {
        this.visited[v] = true;

        let neighbours = this.adjList.get(v);
        for (let i in neighbours) {
            let neighbour = neighbours[i];
            if (!this.visited[neighbour]) {
                this.dfs(neighbour);
            }
        }
    }

    countTrees() {
        let count = 0;

        for (let i = 0; i < this.vertices; i++) {
            if (!this.visited[i]) {
                this.dfs(i);
                count++;
            }
        }

        return count;
    }
}

// Example usage:
let g3 = new Graph(6);
vertices.forEach(v => g3.addVertex(v));
g3.addEdge(0, 1);
g3.addEdge(2, 3);
g3.addEdge(4, 5);
console.log(g3.countTrees()); // Output: 3




Q.5. Detect Cycle in a Directed Graph
class Graph {
    constructor(vertices) {
        this.vertices = vertices;
        this.adjList = new Map();
    }

    addVertex(v) {
        this.adjList.set(v, []);
    }

    addEdge(v, w) {
        this.adjList.get(v).push(w);
    }

    isCyclic() {
        let visited = new Array(this.vertices).fill(false);
        let recStack = new Array(this.vertices).fill(false);

        for (let i = 0; i < this.vertices; i++) {
            if (this.isCyclicUtil(i, visited, recStack)) {
                return true;
            }
        }

        return false;
    }

    isCyclicUtil(v, visited, recStack) {
        if (recStack[v]) {
            return true;
        }

        if (visited[v]) {
            return false;
        }

        visited[v] = true;
        recStack[v] = true;

        let neighbours = this.adjList.get(v);
        for (let i in neighbours) {
            let neighbour = neighbours[i];
            if (this.isCyclicUtil(neighbour, visited, recStack)) {
                return true;
            }
        }

        recStack[v] = false;
        return false;
    }
}

// Example usage:
let g4 = new Graph(4);
g4.addVertex(0);
g4.addVertex(1);
g4.addVertex(2);
g4.addVertex(3);
g4.addEdge(0, 1);
g4.addEdge(1, 2);
g4.addEdge(2, 0);
g4.addEdge(2, 3);
console.log(g4.isCyclic()); // Output: true
